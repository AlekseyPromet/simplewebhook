{
	"info": {
		"_postman_id": "6cc99053-20ad-4b81-9212-fb8cd7e6ab1b",
		"name": "simple webhook",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5035863",
		"_collection_link": "https://www.postman.com/bold-comet-6112/workspace/api-russpass/collection/5035863-6cc99053-20ad-4b81-9212-fb8cd7e6ab1b?action=share&source=collection_link&creator=5035863"
	},
	"item": [
		{
			"name": "create webhook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('Key');",
							"  pm.expect(responseData).to.have.property('Url');",
							"  pm.expect(responseData).to.have.property('iteration');",
							"  pm.expect(responseData).to.have.property('amount');",
							"  pm.expect(responseData).to.have.property('per_seconds');",
							"});",
							"",
							"pm.test(\"Key is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Key).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"",
							"  pm.environment.set(\"id\", responseData.Key);",
							"});",
							"",
							"",
							"pm.test(\"Amount and per_seconds are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.amount).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Amount should be a non-negative integer\");",
							"    pm.expect(responseData.per_seconds).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Per_seconds should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"url\": \"http://localhost:8090\",\n    \"requests\": {\n        \"amount\": 1000,\n        \"per_seconds\": 1\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8088/invoke",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"invoke"
					]
				}
			},
			"response": []
		},
		{
			"name": "get by key",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8088/get",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "test client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"iteration\": 1000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8090/",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						""
					]
				}
			},
			"response": []
		}
	]
}